// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 48hdstfvEZkFZSekMr6Q9R
// Component: KWvN2DAZ5n
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: lG_kCkkDwr/component
import Footer from "../../Footer"; // plasmic-import: z3CYKlSW6J/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_robot_draws_you.module.css"; // plasmic-import: 48hdstfvEZkFZSekMr6Q9R/projectcss
import * as sty from "./PlasmicLabs.module.css"; // plasmic-import: KWvN2DAZ5n/css

import ScienceBlack24DpsvgIcon from "./icons/PlasmicIcon__ScienceBlack24Dpsvg"; // plasmic-import: Jiybrqkkl/icon

export type PlasmicLabs__VariantMembers = {};

export type PlasmicLabs__VariantsArgs = {};
type VariantPropType = keyof PlasmicLabs__VariantsArgs;
export const PlasmicLabs__VariantProps = new Array<VariantPropType>();

export type PlasmicLabs__ArgsType = {};
type ArgPropType = keyof PlasmicLabs__ArgsType;
export const PlasmicLabs__ArgProps = new Array<ArgPropType>();

export type PlasmicLabs__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  svg?: p.Flex<"svg">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultLabsProps {
  dataFetches: PlasmicLabs__Fetches;
}

function PlasmicLabs__RenderFunc(props: {
  variants: PlasmicLabs__VariantsArgs;
  args: PlasmicLabs__ArgsType;
  overrides: PlasmicLabs__OverridesType;
  dataFetches?: PlasmicLabs__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(defaultcss.all, sty.box__ybBVb)}>
            <div className={classNames(defaultcss.all, sty.box__lAu0)}>
              <ScienceBlack24DpsvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(defaultcss.all, sty.svg)}
                role={"img"}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__vycil
                )}
              >
                {"Labs"}
              </div>
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__tHsqW
              )}
            >
              {
                "Robot Draws You is not just an art project, it is also an educational initaitive to help teach about computer graphics, software engineering and generally getting people hyped about building robots"
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__z9TSw
              )}
            >
              {
                "First we will list the github repos used to create artwork here so other people can experiment and create awesome things themselves."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__zO7Z2
              )}
            >
              {
                "Next we will create our own plotter machine and software to improve and enhance the pen artwork experience."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__d7Ydi
              )}
            >
              {
                "Once a proof of concept machine and software are able to be demoed end to end, the goal is to create and sell a kit that people can buy to use to make their own artwork machine / plotter.  The goal at this point is to create a larger machine that can create 5x7ft size posters."
              }
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__haHo3
              )}
            >
              {
                "Lastly, we want to bring the entertainment and excitement of watching drawings happen live out into the world. When the machine is ready and portable we'll be able to bring it to events, functions and parties to let people have fun with it and get weird and creative with pens and paper in person."
              }
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "svg", "footer"],
  header: ["header"],
  svg: ["svg"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  svg: "svg";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLabs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLabs__VariantsArgs;
    args?: PlasmicLabs__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLabs__Fetches;
  } & Omit<PlasmicLabs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLabs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLabs__ArgProps,
      internalVariantPropNames: PlasmicLabs__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLabs__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLabs";
  } else {
    func.displayName = `PlasmicLabs.${nodeName}`;
  }
  return func;
}

export const PlasmicLabs = Object.assign(
  // Top-level PlasmicLabs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    svg: makeNodeComponent("svg"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicLabs
    internalVariantProps: PlasmicLabs__VariantProps,
    internalArgProps: PlasmicLabs__ArgProps
  }
);

export default PlasmicLabs;
/* prettier-ignore-end */
