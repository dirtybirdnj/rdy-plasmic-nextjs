// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 48hdstfvEZkFZSekMr6Q9R
// Component: lG_kCkkDwr
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_robot_draws_you.module.css"; // plasmic-import: 48hdstfvEZkFZSekMr6Q9R/projectcss
import * as sty from "./PlasmicHeader.module.css"; // plasmic-import: lG_kCkkDwr/css

import HelpOutlineBlack24DpsvgIcon from "./icons/PlasmicIcon__HelpOutlineBlack24Dpsvg"; // plasmic-import: R4oOi9iOb/icon
import CollectionsBlack24DpsvgIcon from "./icons/PlasmicIcon__CollectionsBlack24Dpsvg"; // plasmic-import: 4DpgpgqvH/icon
import ShoppingCartBlack24DpsvgIcon from "./icons/PlasmicIcon__ShoppingCartBlack24Dpsvg"; // plasmic-import: mdMnqK-FO/icon
import ScienceBlack24DpsvgIcon from "./icons/PlasmicIcon__ScienceBlack24Dpsvg"; // plasmic-import: Jiybrqkkl/icon
import MailBlack24DpsvgIcon from "./icons/PlasmicIcon__MailBlack24Dpsvg"; // plasmic-import: t1Is1vbL3/icon

export type PlasmicHeader__VariantMembers = {};

export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultHeaderProps {
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;
  dataFetches?: PlasmicHeader__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__znfz5)}>
        <p.PlasmicLink
          className={classNames(defaultcss.all, sty.link__xAAe0)}
          component={Link}
          href={"/"}
          platform={"nextjs"}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__gghQ1
            )}
          >
            {"Robot Draws You"}
          </div>
        </p.PlasmicLink>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box___8Qn8O)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box___8I21Z)}
        >
          <p.PlasmicLink
            className={classNames(defaultcss.all, sty.link__p0KlS)}
            component={Link}
            href={"/about"}
            platform={"nextjs"}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___9MpI6)}
            >
              <HelpOutlineBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__oo2Tw)}
                role={"img"}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__ujnt
                )}
              >
                {"About"}
              </div>
            </p.Stack>
          </p.PlasmicLink>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__h1Byx)}
        >
          <p.PlasmicLink
            className={classNames(defaultcss.all, sty.link__rzHsg)}
            component={Link}
            href={"/gallery"}
            platform={"nextjs"}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___5GSyn)}
            >
              <CollectionsBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__kZuz1)}
                role={"img"}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box___19C9
                )}
              >
                {"Gallery"}
              </div>
            </p.Stack>
          </p.PlasmicLink>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__efFlN)}
        >
          <p.PlasmicLink
            className={classNames(defaultcss.all, sty.link__qbe8)}
            component={Link}
            href={"/shop"}
            platform={"nextjs"}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__sotOu)}
            >
              <ShoppingCartBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__dHm5)}
                role={"img"}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__yocuB
                )}
              >
                {"Shop"}
              </div>
            </p.Stack>
          </p.PlasmicLink>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__zelMr)}
        >
          <p.PlasmicLink
            className={classNames(defaultcss.all, sty.link__vM54Z)}
            component={Link}
            href={"/labs"}
            platform={"nextjs"}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__nRqoY)}
            >
              <ScienceBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg___6LDtZ)}
                role={"img"}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__z7Y4Q
                )}
              >
                {"Labs"}
              </div>
            </p.Stack>
          </p.PlasmicLink>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__oVka)}
        >
          <p.PlasmicLink
            className={classNames(defaultcss.all, sty.link__k0254)}
            component={Link}
            href={"/contact"}
            platform={"nextjs"}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__hm55Y)}
            >
              <MailBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__ofydO)}
                role={"img"}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__aF7Lj
                )}
              >
                {"Contact"}
              </div>
            </p.Stack>
          </p.PlasmicLink>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHeader__Fetches;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeader__ArgProps,
      internalVariantPropNames: PlasmicHeader__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
