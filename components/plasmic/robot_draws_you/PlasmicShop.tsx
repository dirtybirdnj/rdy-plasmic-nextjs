// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 48hdstfvEZkFZSekMr6Q9R
// Component: kciZgiPl4e
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: lG_kCkkDwr/component
import Footer from "../../Footer"; // plasmic-import: z3CYKlSW6J/component

import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ALeWoYV5r79i/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_robot_draws_you.module.css"; // plasmic-import: 48hdstfvEZkFZSekMr6Q9R/projectcss
import * as sty from "./PlasmicShop.module.css"; // plasmic-import: kciZgiPl4e/css

import ShoppingCartBlack24DpsvgIcon from "./icons/PlasmicIcon__ShoppingCartBlack24Dpsvg"; // plasmic-import: mdMnqK-FO/icon
import RequestQuoteBlack24DpsvgIcon from "./icons/PlasmicIcon__RequestQuoteBlack24Dpsvg"; // plasmic-import: OUuHFDdm0/icon
import ShoppingBasketBlack24DpsvgIcon from "./icons/PlasmicIcon__ShoppingBasketBlack24Dpsvg"; // plasmic-import: fTSOErdm5/icon
import PaymentsBlack24DpsvgIcon from "./icons/PlasmicIcon__PaymentsBlack24Dpsvg"; // plasmic-import: _mS9ccqfR/icon
import PointOfSaleBlack24DpsvgIcon from "./icons/PlasmicIcon__PointOfSaleBlack24Dpsvg"; // plasmic-import: xWeDk6wKn/icon
import EmojiEmotionsBlack24DpsvgIcon from "./icons/PlasmicIcon__EmojiEmotionsBlack24Dpsvg"; // plasmic-import: QFzZyFtwu/icon
import AaronLousvgIcon from "./icons/PlasmicIcon__AaronLousvg"; // plasmic-import: bPx76Y3xV/icon

export type PlasmicShop__VariantMembers = {};

export type PlasmicShop__VariantsArgs = {};
type VariantPropType = keyof PlasmicShop__VariantsArgs;
export const PlasmicShop__VariantProps = new Array<VariantPropType>();

export type PlasmicShop__ArgsType = {};
type ArgPropType = keyof PlasmicShop__ArgsType;
export const PlasmicShop__ArgProps = new Array<ArgPropType>();

export type PlasmicShop__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  buyArtwork?: p.Flex<"svg">;
  columns?: p.Flex<"div">;
  img?: p.Flex<"img">;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultShopProps {
  dataFetches: PlasmicShop__Fetches;
}

function PlasmicShop__RenderFunc(props: {
  variants: PlasmicShop__VariantsArgs;
  args: PlasmicShop__ArgsType;
  overrides: PlasmicShop__OverridesType;
  dataFetches?: PlasmicShop__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(defaultcss.all, sty.box__rwAir)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__u2EtX
              )}
            >
              {"Shop"}
            </div>

            <ShoppingCartBlack24DpsvgIcon
              className={classNames(defaultcss.all, sty.svg__a6Dcx)}
              role={"img"}
            />
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__dH04
            )}
          >
            {"Support the Project!"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__pDcaz
            )}
          >
            {"Please and thank you."}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__kEe8Z
            )}
          >
            {"Buy Artwork!"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box___1DNox
            )}
          >
            {"Don't disappoint the robot he'll be very sad."}
          </div>

          {(
            hasVariant(globalVariants, "screen", "desktop")
              ? true
              : hasVariant(globalVariants, "screen", "mobile")
              ? false
              : true
          ) ? (
            <div className={classNames(defaultcss.all, sty.box___6HtOo)}>
              <RequestQuoteBlack24DpsvgIcon
                data-plasmic-name={"buyArtwork"}
                data-plasmic-override={overrides.buyArtwork}
                className={classNames(defaultcss.all, sty.buyArtwork)}
                role={"img"}
              />

              <ShoppingCartBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__uIiB)}
                role={"img"}
              />

              <ShoppingBasketBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__v6Ah)}
                role={"img"}
              />

              <PaymentsBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__ta2S)}
                role={"img"}
              />

              <PointOfSaleBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg__j2NuP)}
                role={"img"}
              />

              <EmojiEmotionsBlack24DpsvgIcon
                className={classNames(defaultcss.all, sty.svg___68Pmb)}
                role={"img"}
              />
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            hasGap={true}
            className={classNames(defaultcss.all, sty.columns)}
          >
            <div className={classNames(defaultcss.all, sty.column___6I1Mh)}>
              <AaronLousvgIcon
                className={classNames(defaultcss.all, sty.svg__dsuGc)}
                role={"img"}
              />
            </div>

            <div className={classNames(defaultcss.all, sty.column__gXSmT)}>
              <p.PlasmicLink
                className={classNames(defaultcss.all, sty.link__mzHq6)}
                component={Link}
                href={"/shop/facetrace"}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__zhHnB
                  )}
                >
                  {"FaceTrace"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__fKOlZ
                  )}
                >
                  {"$100 - $500"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__uTsR
                  )}
                >
                  {
                    "Turn any photograph into unique, one of a kind plotter artwork. Some conditions / limitations apply, but generally speaking it can draw ANYTHING you can come up with."
                  }
                </div>
              </p.PlasmicLink>
            </div>
          </p.Stack>

          <div className={classNames(defaultcss.all, sty.box__vOkrf)}>
            <div className={classNames(defaultcss.all, sty.box___6ZfsR)}>
              <div className={classNames(defaultcss.all, sty.box__yDsF5)}>
                <p.PlasmicLink
                  className={classNames(defaultcss.all, sty.link__fRiyn)}
                  component={Link}
                  href={"/shop/maps"}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__s94Cy
                    )}
                  >
                    {"Maps"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__z3Vy
                    )}
                  >
                    {"$250- $700"}
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__oQesl
                    )}
                  >
                    {
                      "Using a variety of map data sources, we've created a unique printing process that maintains the hand drawn feel of pen drawn artwork. From USGS to OpenStreetMaps we can combine things to create maps to decorate or commemorate."
                    }
                  </div>
                </p.PlasmicLink>
              </div>

              <img
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(defaultcss.img, sty.img)}
                role={"img"}
                src={"/plasmic/robot_draws_you/images/brooklynTopo.png"}
              />
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "buyArtwork", "columns", "img", "footer"],
  header: ["header"],
  buyArtwork: ["buyArtwork"],
  columns: ["columns"],
  img: ["img"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  buyArtwork: "svg";
  columns: "div";
  img: "img";
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicShop__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicShop__VariantsArgs;
    args?: PlasmicShop__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicShop__Fetches;
  } & Omit<PlasmicShop__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicShop__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicShop__ArgProps,
      internalVariantPropNames: PlasmicShop__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicShop__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShop";
  } else {
    func.displayName = `PlasmicShop.${nodeName}`;
  }
  return func;
}

export const PlasmicShop = Object.assign(
  // Top-level PlasmicShop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    buyArtwork: makeNodeComponent("buyArtwork"),
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicShop
    internalVariantProps: PlasmicShop__VariantProps,
    internalArgProps: PlasmicShop__ArgProps
  }
);

export default PlasmicShop;
/* prettier-ignore-end */
